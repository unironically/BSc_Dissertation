package main;

import antlr4.InfixLexer;
import antlr4.InfixParser;
import listener.MismatchInputListener;
import org.antlr.v4.runtime.*;

/**
 * Class to take the Strings inputted by the user to the console and begin the process of interpreting them.
 */
public class InputHandler {

    /**
     * Generator object which converts an expression to stack code.
     */
    private Generator gen;

    /**
     * StackCodeHandler object to interpret generated stack code.
     */
    private StackCodeHandler codeHandler;

    /**
     * SymbolTable object to hold initialised variables with their values.
     */
    private SymbolTable symbolTable;

    /**
     * Boolean representing whether verbose mode is active.
     */
    private boolean verboseMode;

    /**
     * Constructor for InputHandler objects, initialising Generator, StackCodeHandler and SymbolTable objects.
     * @param verboseMode Boolean representing whether verbose mode is active.
     */
    public InputHandler(boolean verboseMode) {
        this.symbolTable = new SymbolTable();
        this.gen = new Generator(symbolTable);
        this.codeHandler = new StackCodeHandler();
        this.verboseMode = verboseMode;
    }

    /**
     * Method to take a string input and invoke methods to perform lexical analysis parsing on it, before generating and
     * running stack code.
     * @param input String user input from console interface.
     * @return Double result of the expression inputted by the user.
     */
    public Double handleString(String input) {
        ReducedInputTree syntaxTree = frontEndChain(input);
        TreeNode root = syntaxTree.getRoot();
        if (root.getToken().getType() != TreeToken.TokenType.EQUALS) {
            String stackCode = generatePrintStackCode(root);
            return codeHandler.execute(stackCode);
        }
        handleAssignment(root);
        return null;
    }

    /**
     * Method to handle user inputs which assign expressions to variables.
     * @param root TreeNode root of the reduced syntax tree of the assignment expression.
     */
    private void handleAssignment(TreeNode root) {
        TreeToken identifier = root.getLeft().getToken();
        TreeNode subTreeRoot = root.getRight();
        String stackCode = generatePrintStackCode(subTreeRoot);
        Double res = codeHandler.execute(stackCode);
        symbolTable.addIdentifier(identifier.toString(), res);
    }

    /**
     * Method to invoke the Generator object to generate stack code for an expression, and print the stack code if the
     * verboceMode boolean is set.
     * @param root TreeNode root of the expression tree.
     * @return String stack code generated with the expression.
     */
    private String generatePrintStackCode(TreeNode root) {
        String stackCode = gen.generateFromTree(root);
        if (verboseMode) System.out.println(stackCode);
        return stackCode;
    }

    /**
     * Method to create a new ReducedInputTree object from the syntax tree for an expression generated by ANTLR.
     * @param input The String expression to be converted to a tree.
     * @return ReducedInputTree object representing the reduced syntax tree of an expression.
     */
    private ReducedInputTree frontEndChain(String input) {
        InfixLexer lexer = new InfixLexer(CharStreams.fromString(input));
        lexer.removeErrorListeners();
        lexer.addErrorListener(MismatchInputListener.INSTANCE);
        InfixParser parser = new InfixParser(new CommonTokenStream(lexer));
        parser.removeErrorListeners();
        parser.addErrorListener(MismatchInputListener.INSTANCE);
        return new ReducedInputTree(parser.input().getChild(0));
    }

}
