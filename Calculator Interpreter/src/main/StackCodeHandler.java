package main;

import antlr4.StackCodeLexer;
import antlr4.StackCodeParser;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;

import java.util.Stack;

/**
 * Class to interpret stack code and calculate the result of a user's expression thereby.
 */
public class StackCodeHandler {

    /**
     * String representing the stack code to be interpreted.
     */
    private String stackCode;

    /**
     * ParseTree representing the syntax tree generated by ANTLR for a stack code input.
     */
    private ParseTree tree;

    /**
     * Stack of Double objects which store numbers pushed by the stack code.
     */
    private Stack<Double> numStack;

    /**
     * Constructor for StackCodeHandler objects which simply creates a new Stack object storing Doubles.
     */
    public StackCodeHandler() {
        this.numStack = new Stack<>();
    }

    /**
     * Method to begin interpreting the stack code generated from a user expression.
     * @param stackCode String object representing the stack code to be generated.
     * @return Double result of the calculation.
     */
    public Double execute(String stackCode) {
        if (stackCode == null) return null;
        StackCodeLexer lexer = new StackCodeLexer(CharStreams.fromString(stackCode));
        StackCodeParser parser = new StackCodeParser(new CommonTokenStream(lexer));
        this.stackCode = stackCode;
        this.tree = parser.input();
        return traverseTree();
    }

    /**
     * Method to handle the individual lines of the stack code string, represented by children of the root of the
     * ANTLR tree.
     * @return Double result of the calculation.
     */
    private Double traverseTree() {
        for (int i = 0; i < tree.getChildCount(); i++) {
            handleCommandTree(tree.getChild(i).getChild(0));
        }
        return numStack.pop();
    }

    /**
     * Method to handle the ANTLR sub-trees representing individual stack code commands.
     * @param subTree ANTLR-generated sub-tree of the stack command to be handled.
     */
    private void handleCommandTree(ParseTree subTree) {
        String prefix = subTree.getChild(0).getText();
        if (prefix.equals("PUSH")){
            handlePushNumber(subTree.getChild(1).getText());
        } else {
            handleOperation(prefix);
        }
    }

    /**
     * Method to handle the pushing of a Double object to the number stack.
     * @param num String to be converted to a Double and added to the stack.
     */
    private void handlePushNumber(String num) {
        Double toPush = Double.valueOf(num);
        numStack.push(toPush);
    }

    /**
     * Method to handle stack code operation commands and calculate the result of the use of such operations,
     * adding this to the number stack.
     * @param operation String operation to be handled.
     */
    private void handleOperation(String operation) {
        Double second = numStack.pop();
        Double first = numStack.pop();
        switch (operation) {
            case "DIV":
                numStack.push(first / second);
                break;
            case "MUL":
                numStack.push(first * second);
                break;
            case "ADD":
                numStack.push(first + second);
                break;
            case "SUB":
                numStack.push(first - second);
                break;
        }
    }

}
