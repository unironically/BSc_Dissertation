package listener;

import org.antlr.v4.runtime.BaseErrorListener;
import org.antlr.v4.runtime.RecognitionException;
import org.antlr.v4.runtime.Recognizer;
import org.antlr.v4.runtime.misc.ParseCancellationException;

/**
 * Class to represent a listener for mismatch input errors generated by ANTLR for a grammar, which we attach to a lexer
 * and parser.
 * Code submitted by StackOverflow user 'Mouagip'.
 * @see <a href="https://stackoverflow.com/questions/18132078/handling-errors-in-antlr4">
 *     https://stackoverflow.com/questions/18132078/handling-errors-in-antlr4</a>
 */
public class MismatchInputListener extends BaseErrorListener {

    /**
     * Singleton object instance of the MismatchInputListener.
     */
    public static final MismatchInputListener INSTANCE = new MismatchInputListener();

    /**
     * Method invoked when a mismatch input error is generated by ANTLR.
     * @param recognizer Recogniser representing the parser which got the error.
     * @param offendingSymbol Symbol inputted by the user which caused the error.
     * @param line int line number of the error.
     * @param charPositionInLine int position of the offending symbol.
     * @param msg String error message generated by ANTLR.
     * @param e RecognitionException object generated by ANTLR.
     * @throws ParseCancellationException
     */
    @Override
    public void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int line, int charPositionInLine,
                            String msg, RecognitionException e) throws ParseCancellationException {
        throw new ParseCancellationException("Error: " + msg);
    }
}